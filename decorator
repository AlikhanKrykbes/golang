package main

import (
	"fmt"
)

// Component interface represents the basic component.
type Component interface {
	GetPrice() float64
}

// BasePc is the basic concrete component.
type BasePc struct{}

func (pc *BasePc) GetPrice() float64 {
	return 10.0
}

// HomePc is a concrete decorator for home PCs.
type HomePc struct {
	Cpu  int
	Card int
	Component
}

func (pc *HomePc) GetPrice() float64 {
	return pc.Component.GetPrice() * float64(pc.Cpu) * float64(pc.Card)
}

// ServerPc is a concrete decorator for server PCs.
type ServerPc struct {
	Cpu    int
	Memory int
	Component
}

func (pc *ServerPc) GetPrice() float64 {
	return pc.Component.GetPrice() * float64(pc.Cpu) * float64(pc.Memory)
}

func main() {
	base := &BasePc{}
	home := &HomePc{
		Cpu:       4,
		Card:      1,
		Component: base,
	}
	server := &ServerPc{
		Cpu:       16,
		Memory:    256,
		Component: base,
	}

	fmt.Printf("Base Price: %.2f\n", base.GetPrice())
	fmt.Printf("Home PC Price: %.2f\n", home.GetPrice())
	fmt.Printf("Server PC Price: %.2f\n", server.GetPrice())
}
